<% environment.context_class.instance_eval { include Rails.application.routes.url_helpers } %>
var activeFilters = [];
var activeCategories = [];
var activeLocations = [];
var categoryHash;
var cat_typeahead_selector = '.event_categories ul.typeahead';

$(document).ready(function() {
    hideEventDetails();
    $('span.event-topbar_js').click(toggleContent);
    $('a[data-role="filter-link"]').click(filterCategory);
    //we need to handle the click on the ul level,
    // because the li elements aren't generated  yet
    $('.show-long-description_js').click(toggleLongDescription);
    $('a[data-target]').on("ajax:success", showAjaxResponse);
    $('[data-toggle="popover"]').popover();
    createCategoryHash();
    $('.combobox').combobox();
    $('.combobox').click(function(){
        $(this).siblings('.dropdown-toggle').click();
    });
    $('input.category-combobox').keyup(function(){
        // if suggestions are available, remove the create box
        // if no suggestions are available, suggest category creation
        if (suggestionsAvailable(this, cat_typeahead_selector)) {
            $('#new-category-box').find('div').remove();
        } else {
           createSuggestionLink.call(this);
       }
    });

    $('input.location-combobox').keyup(function(){
        if (!suggestionsAvailable(this, '.event_location ul.typeahead')){
            createLocationSuggestionLink(this,
                    '#new-location-box',
                    '<%= new_location_path %>',
                    i18n.events.form.new_location,
                    i18n.events.form.new_location_title,
                    "event[location_id]",
                    'input.location-combobox',
                    '.event_location ul.typeahead'
            );
        }
    });

    $('.category-combobox').change(function(){
        addToTarget('selected-categories', this.value);
        $(this).val('');
    });

    $('[data-function="datetime-picker"]').datetimepicker({
        language: locale,
        minuteStepping: 5
    });
    $('#event_start_time').on('dp.change', function(e){
        $('#event_end_time').data("DateTimePicker").setMinDate(e.date);
        $('#event_end_time').data("DateTimePicker").setDate(e.date);
    });

});

/**
 * Populate a Bootstrap modal with our
 * ajax response and activate it.
 * @param event
 * @param xhr
 */
function loadRemoteModal(context, event, xhr) {
    // listeners to be attached dynamically to
    // the loaded modal object
    // in the event of success we receive a json object
    // which we use to update the form after writing
    // a success message
    // in case of failure, we receive back html which
    // we put back into the modal
    function handleSuccess(event, xhr) {
        $alert = $('<div>', {
            class: 'alert alert-success',
            role: 'alert',
            style: 'margin-bottom: 0px;',
            text: i18n.events.form.location_created
        });
        $target.find('.modal-body').html($alert);
        // put the id into the correct field
        var update_field = '[name="' + $this.attr('data-update-field') + '"]';
        $(update_field).val(xhr.id);
        // put the name into the input field and disable it
        var update_val = $this.attr('data-update-val');
        $(update_val).val(xhr.name).attr('disabled', true);
    }
    function handleFailure(event, xhr) {
        $target.find('.modal-body').html(xhr.responseText);
    }
    var $this = $(context);
    var title = $this.attr('data-modal-title');
    var $target = $('#remote_form_modal');
    $target.find('.modal-body').html(xhr);
    $target.find('.modal-title').text(title);
    $('form#new_location').on('ajax:success', handleSuccess);
    $('form#new_location').on('ajax:error', handleFailure);
    $target.modal();
}

/**
 * Reusable function to create alert boxes with link texts
 * returns an object with attributes link_id, html_id, and html.
* */
function createAlertBox(value, text, link, title, update_field, update_val) {
    text = text.replace('<value>', value);
    this.link_id = 'y' + Date.now();
    var create_link = '<a id="' + this.link_id + '" '
            + 'class="alert-link" href="' + link + '" '
            + 'data-value="' + value + '" '
            + 'data-remote="true"'
            + 'data-modal-title="' + title + '" ' +
            + 'data-update-field="' + update_field + '" '
            + 'data-update-val="' + update_val + '">'
            + text + '</a>';
    this.html_id = 'x' + Date.now();
    this.html = '<div class="alert alert-info alert-dismissible" id="' + this.html_id
            + '" role="alert"><button type="button" class="close" data-dismiss="alert">'
            + '<span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button> '
            + create_link + '</div>';
}

function createLocationSuggestionLink(input, target, link, text, title, update_field, update_val, typeahead){
    var alertbox = new createAlertBox(input.value, text, link, title, update_field, update_val);
    $(target).html(alertbox.html);
    $(target).removeClass('hidden');
    $('#' + alertbox.link_id).unbind().on('ajax:success', function(event, xhr){
        loadRemoteModal(this, event, xhr);
        $('#' + alertbox.html_id).remove();

    });
    $(update_val).keyup(function(){
        if (suggestionsAvailable(this, typeahead)){
            $('#' + alertbox.html_id).remove();
        }
    });
}

/**
 * Give the user a link to create a category
 * and handle clicks on this link
 */
function createSuggestionLink() {
    // add the created category to the view
    function createCategory(data) {
        categoryHash[data.id] = data.key;
        addToTarget('selected-categories', data.id);
        $('#' + alertbox.html_id).remove();
    }

    var alertbox = new createAlertBox(this.value, i18n.events.form.new_category);
    $('#new-category-box').html(alertbox.html);
    $('#new-category-box').removeClass('hidden');
    $('#' + alertbox.link_id).click(function () {
        // post create to our category controller and update the category hash with the values returned
        $.post('<%= categories_path %>', { 'category[key]': $(this).attr('data-value')}, createCategory, 'json');
        return false;
    });
}


/**
 * Check to see if popup suggestions are available
 * @params input - the current input form
 * @params typeahead_selector - a selector to find
 * the current typeahead
 * @returns {*|jQuery}
 */
function suggestionsAvailable(input, typeahead_selector){
    return $(input).is(':focus') && $(typeahead_selector).is(':visible');
}
/**
 * Build a hash of categories with their ids as
 * keys and their names as values.
 */
function createCategoryHash(){
    categoryHash = {};
    $('select#event-category-dummy option').map(function() {
        categoryHash[$(this).val()] = $(this).text();
    });
}

/**
 * Append the selected value to the correct target.
 * Ensure that the value is not already present and that
 * it is not an array or a number.
 * @param target
 * @param val
 */
function addToTarget(target, val) {
    // check to see if category already added
    function alreadyAdded(val){
        // need to convert from a jquery object to an Array
        var $vals_obj = $('[data-role="category_value"]').map(function(){
            return this.value
        });
        var vals = $.makeArray($vals_obj);
        return (vals.indexOf(val) >= 0)
    }
    // guard clauses to make sure we're only dealing
    // with valid ids that haven't already been added
    if (!val in categoryHash) return;
    if (!val.isNumeric()) return;
    if (alreadyAdded(val)) return;
    var data_target = $('[data-role="' + target + '"]');
    // create the category label and add to form
    var label = '<span id="label_' + val + '" class="tag label label-primary">';
    label += categoryHash[val];
    label += ' <a id="remove_' + val +'"><span class="remove glyphicon glyphicon-remove glyphicon-white"></span></a>';
    label += '</span>';
    data_target.append(label);
    // we put the numbers in a specially created input
    // to enable multiple values
    // and clear the default one to prevent duplicates
    var input_field = '<input id="input_' + val + '" '
            + 'name="event[category_ids][]" '
            + 'data-role="category_value" '
            + 'class="hidden" value="' + val + '"/>';
    data_target.append(input_field);
    $('#event-category-dummy').val('');
    $('#remove_' + val).click(function(){
        $('#input_' + val).remove();
        $('#label_' + val).remove();
        $('.combobox-container').find('input').filter(':first').val('');
    })



}

/**
 *  Because of a jQuery bug, we need to inform
 *  jQuery of the event-detail's height so that
 *  the slideToggle doesn't "jump".
 *  See https://coderwall.com/p/r855xw for details.
 */
function hideEventDetails() {
    $('.event-details').each(function(){
        $height = $(this).height();
        $(this).css('height', $height);
        $(this).hide();
    })
}

/**
 * Upon completing an AJAX request
 * show the result in an element based
 * on the calling object's data-target attribute
 * @param event
 * @param xhr
 */
function showAjaxResponse(event, xhr){
    //target div has id equal to the clicked link's data target attr
    var target = $('#' + $(this).attr('data-target'));
    target.html(xhr);
    $(this).parents('div.comment-container_js').hide();
    target.removeClass('hidden');
}

/**
 * When a user clicks on a filter-link
 * hide all events that do not have that category
 * and show filter as active in DOM
 * @returns {boolean}
 */
function filterCategory(){
    var $this = $(this);
    var filter = $this.attr('data-toggle');
    var type = $this.attr('data-filter-type');
    var filterArray;
    if (type == 'category') {
        filterArray = activeCategories;
    } else if (type == 'location') {
        filterArray = activeLocations;
    }
    if (activeFilters.indexOf(filter) == -1) {
        activeFilters.push(filter);
        filterArray.push(filter);
    } else if ($this.hasClass('active')){
        activeFilters.remove(filter);
        filterArray.remove(filter);
    }
    refreshFilterView();
    evaluateShown();
    return false;
}

function evaluateShown(){
    /**
     * if there is at least one active filter
     * hide all events that do not have a category matching our filters
     * else show all events
     */
    function evaluateEventVisibility() {
        var events = $('[data-role="event"]');

        if (activeFilters.length == 0) {
            events.show();
            $('[data-role="day"]').show();
        } else {
            events.each(function (i) {
                var attributes = $(this).attr('data-toggle').split(' ');
                var parentId = '#' + $(this).attr('data-parent');
                if ($(this).is(':hidden')) {
                    if (attributesMatchFilters(attributes)) {
                        $(this).show();
                        $(parentId).show();
                    }
                } else if ($(this).is(':visible')) {
                    if (!attributesMatchFilters(attributes)) {
                        $(this).hide();
                    }
                }
            });
        }
    }

    /**
     * If a date has no visible child events, hide it
     * Otherwise, show it.
     */
    function evaluateDateVisibility() {
        $('[data-role="day"]').each(function (i) {
            var childEvents = $(this).find('[data-role="event"]');
            var numVisible = numVisibleChildEvents(childEvents);
            if (numVisible > 0) {
                $(this).show();
                // update the number contained within the header
                $(this).find('[data-role="day-event-count"]').text('(' + numVisible + ')');
            } else {
                $(this).hide();
            }
        });
    }

    /**
     * Create a description of the currently active filters based on
     * the filter lists. This description includes text and a set of tags
     * which are rendered with links and listeners allowing them to be
     * removed again.
     */
    function evaluateFilterDescription(){
        //Create a nice html tag for a given filter type
        // including the correct data-attributes to enable
        // it to function to remove things
        function createTagLink(name, type){
            var label_type;
            if (type == 'category'){
                label_type = 'label-primary';
            } else if (type == 'location') {
                label_type = 'label-success';
            }
            tag = "<span class='tag label " + label_type + "'>";
            tag += name;
            tag += "<a class='active' data-role='filter-link' data-filter-type='" + type + "' data-toggle='" + name + "'>";
            tag += "<span class=\"remove glyphicon glyphicon-remove glyphicon-white\"></span></a></span>";
            return tag;
        }

        var text = i18n.calendar.index.describe_filters.base;
        if (activeCategories.length > 0 ){
            text += i18n.calendar.index.describe_filters.categories;
            var categories = $.map(activeCategories, function(name, i){
                return createTagLink(name, 'category');
            });
            text += categories.join(' ');
        }
        if (activeLocations.length > 0 ){
            text += i18n.calendar.index.describe_filters.locations;
            var locations = $.map(activeLocations, function(name, i){
                return createTagLink(name, 'location');
            });
            text += locations.join(' ');
        }

        var $description = $('[data-role="filter-description"]');
        $description.html(text);
        if (activeCategories.length > 0 || activeLocations.length > 0) {
            $description.removeClass('hidden');
        } else {
            $description.addClass('hidden');
        }
        $('a[data-role="filter-link"]').unbind().click(filterCategory);
    }

    evaluateEventVisibility();
    evaluateDateVisibility();
    evaluateFilterDescription();
}

/**
 * Search all given events and returns
 * the number that are visible.
 * @param childEvents
 * @returns {Integer}
 */
function numVisibleChildEvents(childEvents) {
    var visible = 0;
    $(childEvents).each(function(i) {
        if ($(this).is(':visible')) {
            visible += 1;
            //return false; //return false to break out of the each loop
        }
    });
    return visible;
}

/**
 * This function checks if an event
 * has any of the specified categories
 *
 * @param eventCategories
 * @returns {boolean}
 */
function attributesMatchFilters(eventCategories) {
    for (var i = 0; i < activeFilters.length; i++) {
        if (eventCategories.indexOf(activeFilters[i]) >= 0) {
            return true;
        }
    }
    return false;
}

/**
* Given a change in filter state
* Run through the list of active filters
* and insert html elements to represent them.
*/
function updateActiveFilters(){
    refreshFilterView();
    var filterHTML = '';
    for (var i = 0; i < activeFilters.length; i++) {
        var filterName = activeFilters[i];
        var removeLink = ' <a href="" class="remove-filter" data-toggle="' + filterName + '"> [X] </a>';
        filterHTML += '<li>' + filterName.titleize() + removeLink + '</li>';
    }
    $('ul.active-filters_js').html(filterHTML);
}
/**
 * Given a change in filter state
 * add or remove active class from filters
 * to change display of active filters in the view.
 */
function refreshFilterView(){
    $('a.filter-link').each(function(){
        var filter = $(this).attr('data-toggle');
        if (activeFilters.indexOf(filter) >= 0) {
            $(this).addClass('active');
        } else if ($(this).hasClass('active')) {
            $(this).removeClass('active')
        }
    })
}

/**
 *   If this container's details div is exposed, hide it
 *   otherwise, hide any exposed details div and show the
 *   current container's details div.
 */
function toggleContent() {
    if  ($(this).siblings('.event-details').hasClass('revealed')) {
        $(this).siblings('.event-details').removeClass('revealed').slideToggle('fast');
    } else {
        $('.revealed').removeClass('revealed').slideToggle();
        $(this).siblings('.event-details').addClass('revealed').slideToggle('fast');
    }
}


function toggleLongDescription() {
    $(this).hide();
    $(this).siblings('.long-description').slideToggle();
    return false;
}