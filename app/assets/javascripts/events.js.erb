<% environment.context_class.instance_eval { include Rails.application.routes.url_helpers } %>
var activeFilters = [];
var categoryHash;

$(document).ready(function() {
    hideEventDetails();
    $('span.event-topbar_js').click(toggleContent);
    $('a.filter-link').click(filterCategory);
    //we need to handle the click on the ul level,
    // because the li elements aren't generated  yet
    $('.show-long-description_js').click(toggleLongDescription);
    $('a[data-target]').on("ajax:success", showAjaxResponse);
    $('[data-toggle="popover"]').popover();
    createCategoryHash();
    $('.combobox').combobox();
    $('.combobox').click(function(){
        $(this).siblings('.dropdown-toggle').click();
    });
    $('input.category-combobox').keyup(function(){
       if (!suggestionsAvailable()) {
           createSuggestionLink.call(this);
       }

    });

    $('input.category-combobox').blur(function(){
        //$('#new-category-box').html('');
    });
    $('.category-combobox').change(function(){
        addToTarget('selected-categories', this.value);
         $(this).val('');
    });

    $('[data-function="datetime-picker"]').datetimepicker({
        language: locale,
        minuteStepping: 5
    });
    $('#event_start_time').on('dp.change', function(e){
        $('#event_end_time').data("DateTimePicker").setMinDate(e.date);
        $('#event_end_time').data("DateTimePicker").setDate(e.date);
    })
});

/**
 * Give the user a link to create a category
 * and handle clicks on this link
 */
function createSuggestionLink() {
    // add the created category to the view
    function createCategory(data) {
        categoryHash[data.id] = data.key;
        addToTarget('selected-categories', data.id);
        $('#create-category-alert').remove();
    }

    var text = i18n.events.form.new_category;
    text = text.replace('<category>', this.value);
    var create_link = '<a id="create-new-category" class="alert-link" href="#" data-value="' + this.value + '">' + text + '</a>';

    alert = '<div class="alert alert-info alert-dismissible" id="create-category-alert" role="alert"><button type="button" class="close" data-dismiss="alert"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button> ' +  create_link + '</div>';
    $('#new-category-box').html(alert);
    $('#new-category-box').removeClass('hidden');
    $('#create-new-category').click(function () {
        // post create to our category controller and update the category hash with the values returned
        $.post('<%= categories_path %>', { 'category[key]': $(this).attr('data-value')}, createCategory, 'json');
        return false;
    });
}


/**
 * Check to see if popup suggestions are available
 * @returns {*|jQuery}
 */
function suggestionsAvailable(){
    return $('input.category-combobox').is(':focus') && $('.event_categories ul.typeahead').is(':visible');
}
/**
 * Build a hash of categories with their ids as
 * keys and their names as values.
 */
function createCategoryHash(){
    categoryHash = {};
    $('select#event-category-dummy option').map(function() {
        categoryHash[$(this).val()] = $(this).text();
    });
}

/**
 * Append the selected value to the correct target.
 * Ensure that the value is not already present and that
 * it is not an array or a number.
 * @param target
 * @param val
 */
function addToTarget(target, val) {
    if (val in categoryHash) {
        var data_target = $('[data-role="' + target + '"]');
        var label = '<span id="label_' + val + '" class="tag label label-primary">';
        label += categoryHash[val];
        label += ' <a id="remove_' + val +'"><span class="remove glyphicon glyphicon-remove glyphicon-white"></span></a>';
        label += '</span>';
        data_target.append(label);
        // we put the numbers in a specially created input
        // to enable multiple values
        // and clear the default one to prevent duplicates
        data_target.append('<input id="input_' + val + '" name="event[category_ids][]" ' +
            'class="hidden" value="' + val + '"/>');
        $('#event-category-dummy').val('');
        $('#remove_' + val).click(function(){
            $('#input_' + val).remove();
            $('#label_' + val).remove();
        })
     }


}

/**
 *  Because of a jQuery bug, we need to inform
 *  jQuery of the event-detail's height so that
 *  the slideToggle doesn't "jump".
 *  See https://coderwall.com/p/r855xw for details.
 */
function hideEventDetails() {
    $('.event-details').each(function(){
        $height = $(this).height();
        $(this).css('height', $height);
        $(this).hide();
    })
}

/**
 * Upon completing an AJAX request
 * show the result in an element based
 * on the calling object's data-target attribute
 * @param event
 * @param xhr
 */
function showAjaxResponse(event, xhr){
    //target div has id equal to the clicked link's data target attr
    var target = $('#' + $(this).attr('data-target'));
    target.html(xhr);
    $(this).parents('div.comment-container_js').hide();
    target.removeClass('hidden');
}

/**
 * When a user clicks on a filter-link
 * hide all events that do not have that category
 * and show filter as active in DOM
 * @returns {boolean}
 */
function filterCategory(){
    var filter = $(this).attr('data-toggle');
    if (activeFilters.indexOf(filter) == -1) {
        activeFilters.push(filter);
    } else if ($(this).hasClass('active')){
        activeFilters.remove(filter);
    }
    refreshFilterView();
    evaluateShown();
    return false;
}

function evaluateShown(){
    /**
     * if there is at least one active filter
     * hide all events that do not have a category matching our filters
     * else show all events
     */
    function evaluateEventVisibility() {
        var events = $('[data-role="event"]');

        if (activeFilters.length == 0) {
            events.show();
            $('[data-role="day"]').show();
        } else {
            events.each(function (i) {
                var attributes = $(this).attr('data-toggle').split(' ');
                var parentId = '#' + $(this).attr('data-parent');
                if ($(this).is(':hidden')) {
                    if (attributesMatchFilters(attributes)) {
                        $(this).show();
                        $(parentId).show();
                    }
                } else if ($(this).is(':visible')) {
                    if (!attributesMatchFilters(attributes)) {
                        $(this).hide();
                    }
                }
            });
        }
    }

    /**
     * If a date has no visible child events, hide it
     * Otherwise, show it.
     */
    function evaluateDateVisibility() {
        $('[data-role="day"]').each(function (i) {
            var childEvents = $(this).find('[data-role="event"]');
            var numVisible = numVisibleChildEvents(childEvents);
            if (numVisible > 0) {
                $(this).show();
                // update the number contained within the header
                $(this).find('[data-role="day-event-count"]').text('(' + numVisible + ')');
            } else {
                $(this).hide();
            }
        });
    }

    evaluateEventVisibility();
    evaluateDateVisibility();
}

/**
 * Search all given events and returns
 * the number that are visible.
 * @param childEvents
 * @returns {Integer}
 */
function numVisibleChildEvents(childEvents) {
    var visible = 0;
    $(childEvents).each(function(i) {
        if ($(this).is(':visible')) {
            visible += 1;
            //return false; //return false to break out of the each loop
        }
    });
    return visible;
}

/**
 * This function checks if an event
 * has any of the specified categories
 *
 * @param eventCategories
 * @returns {boolean}
 */
function attributesMatchFilters(eventCategories) {
    for (var i = 0; i < activeFilters.length; i++) {
        if (eventCategories.indexOf(activeFilters[i]) >= 0) {
            return true;
        }
    }
    return false;
}

/**
* Given a change in filter state
* Run through the list of active filters
* and insert html elements to represent them.
*/
function updateActiveFilters(){
    refreshFilterView();
    var filterHTML = '';
    for (var i = 0; i < activeFilters.length; i++) {
        var filterName = activeFilters[i];
        var removeLink = ' <a href="" class="remove-filter" data-toggle="' + filterName + '"> [X] </a>';
        filterHTML += '<li>' + filterName.titleize() + removeLink + '</li>';
    }
    $('ul.active-filters_js').html(filterHTML);
}
/**
 * Given a change in filter state
 * add or remove active class from filters
 * to change display of active filters in the view.
 */
function refreshFilterView(){
    $('a.filter-link').each(function(){
        var filter = $(this).attr('data-toggle');
        if (activeFilters.indexOf(filter) >= 0) {
            $(this).addClass('active');
        } else if ($(this).hasClass('active')) {
            $(this).removeClass('active')
        }
    })
}

/**
 *   If this container's details div is exposed, hide it
 *   otherwise, hide any exposed details div and show the
 *   current container's details div.
 */
function toggleContent() {
    if  ($(this).siblings('.event-details').hasClass('revealed')) {
        $(this).siblings('.event-details').removeClass('revealed').slideToggle('fast');
    } else {
        $('.revealed').removeClass('revealed').slideToggle();
        $(this).siblings('.event-details').addClass('revealed').slideToggle('fast');
    }
}


function toggleLongDescription() {
    $(this).hide();
    $(this).siblings('.long-description').slideToggle();
    return false;
}