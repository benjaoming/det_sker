<% environment.context_class.instance_eval { include Rails.application.routes.url_helpers } %>
<% environment.context_class.instance_eval { include EventsHelper } %>
var categoryHash;
var cat_typeahead_selector = '.event_categories ul.typeahead';

$(document).ready(function() {
    activateFormPlugins();
    initTypeaheads();
    activateFormListeners();
    createCategoryHash();
});

function initTypeaheads(){
    initTypeahead('#category-typeahead');
    initTypeahead('#location-typeahead');
}


//create the given typeahead based on a selector
// the selected element must have the correct data elements
function initTypeahead(selector){
    var $typeahead = $(selector);
    // guard clause to prevent errors when the object isn't present
    if (!$typeahead.length) return;
    var data = $typeahead.data();
    // constructs the suggestion engine
    var engine = new Bloodhound({
        datumTokenizer: Bloodhound.tokenizers.obj.whitespace('key'),
        queryTokenizer: Bloodhound.tokenizers.whitespace,
        prefetch: {
            url: data.apiPath
        },
        limit: 4
    });

    //ensure the data we've got is always the most recent
    engine.clearPrefetchCache();
    // kicks off the loading/processing of `local` and `prefetch`
    engine.initialize();

    $typeahead.typeahead({
        hint: false,
        highlight: true,
        minLength: 0
    },
    {
        displayKey: data.displayKey,
        // `ttAdapter` wraps the suggestion engine in an adapter that
        // is compatible with the typeahead jQuery plugin
        source: engine.ttAdapter(),
        templates: {
            //header and footer log is stored in the events helper to enable reuse
            header: '<%= typeahead_header %>'.replace('_value_', data.header),
            empty: '<%= typeahead_element %>'.replace('_value_', data.emptyMessage)
        }
    });
    $typeahead.on('typeahead:opened', function(){
        $typeahead.attr('placeholder', '');
        modalFormListener(); //attach listener to the link as it is created
    });
    $typeahead.on('typeahead:selected', function(event, chosen){
        // typeaheads with multiple values need a bit of extra logic
        // to create labels etc.
        if (data.multiple) {
            addToTarget(data.target, $typeahead.typeahead('val'));
            $typeahead.typeahead('val', '');
        } else {
            $(data.target).val(chosen.id)
        }
    });
}

function activateFormListeners() {
    modalFormListener();

    $('#event_start_time').on('dp.change', function(e){
        $('#event_end_time').data("DateTimePicker").setMinDate(e.date);
        $('#event_end_time').data("DateTimePicker").setDate(e.date);
    });
    categoryTagListener();
    $('[data-function="show"]').change(function(){
        var show_target = $(this).attr('data-target');
        $(show_target).removeClass('hidden');
        var hide_target = $(this).attr('data-hide');
        $(hide_target).addClass('hidden');
    });


    $('.btn-file :file').on('fileselect', function(event, numFiles, label) {
        $('#js_button_text').text(label);
    });

}

$(document)
        .on('change', '.btn-file :file', function() {
            var input = $(this),
                    numFiles = input.get(0).files ? input.get(0).files.length : 1,
                    label = input.val().replace(/\\/g, '/').replace(/.*\//, '');
            input.trigger('fileselect', [numFiles, label]);
        });

function modalFormListener() {
    $('a[data-target="remote_form_modal"]').on("ajax:success", function (event, xhr) {
        loadRemoteModal(this, event, xhr);
    });
}

function activateFormPlugins() {
    $('[data-toggle="popover"]').popover();
    $('[data-function="datetime-picker"]').datetimepicker({
        language: locale,
        minuteStepping: 5
    });
}

/**
 * Attached to click on category tags X icon
 * remove whole tag and input target when clicked.
 */
function categoryTagListener(){
    $('[data-function="remove_category"]').click(function(){
        var id = $(this).attr('data-target');
        $('#' + id).remove();
        $(this).parent('.tag').remove();
        return false;
    })
}

/**
 * Populate a Bootstrap modal with our
 * ajax response and activate it.
 * @param event
 * @param xhr
 */
function loadRemoteModal(context, event, xhr) {
    // listeners to be attached dynamically to
    // the loaded modal object
    // in the event of success we receive a json object
    // which we use to update the form after writing
    // a success message
    // in case of failure, we receive back html which
    // we put back into the modal
    function handleSuccess(event, xhr) {
        $target.find('.modal-body').html(xhr);
        // put the id into the correct field
        initTypeahead();

        var update_field = '[name="' + $this.attr('data-update-field') + '"]';
        $(update_field).val(xhr.id);
        // put the name into the input field and disable it
        var update_val = $this.attr('data-update-val');
        $(update_val).val(xhr.display_name).attr('disabled', true);
    }
    function handleFailure(event, xhr) {
        $target.find('.modal-body').html(xhr.responseText);
    }
    var $this = $(context);
    var title = $this.attr('data-modal-title');
    var $target = $('#remote_form_modal');
    $target.find('.modal-body').html(xhr);
    $target.find('.modal-title').text(title);
    // parse the xhr response and get the form object
    // in order to attach listeners
    var $form = $target.find('form');
    $form.on('ajax:success', handleSuccess);
    $form.on('ajax:error', handleFailure);
    $target.modal();
}

/**
 * Build a hash of categories with their ids as
 * keys and their names as values.
 */
// TODO: this method could probably be refactored to
// fit within the typeahead functionality, thus removing
// an extra JSON call
function createCategoryHash(){
    // only call on event-form page
    if ($('input.typeahead').length == 0) return;
    categoryHash = {};
    $.getJSON('<%= categories_path %>', function(data){
        $.each(data, function(i, obj){
            categoryHash[obj.key] = obj.id;
        });
    });
    return categoryHash;
}

/**
 * Append the selected value to the correct target.
 * Ensure that the value is not already present and that
 * it is not an array or a number.
 * @param target
 * @param val
 */
function addToTarget(target, val) {
    // check to see if category already added
    function alreadyAdded(val){
        // need to convert from a jquery object to an Array
        var $vals_obj = $('[data-role="category_value"]').map(function(){
            return this.value
        });
        var vals = $.makeArray($vals_obj);
        return (vals.indexOf(val) >= 0)
    }

    // create label and input using Rails helper
    function createTag(val) {
        var id = categoryHash[val];
        var tag = '<%= category_tag %>';
        return tag.replace('_id_', id, 'gm')
                .replace('_value_', val, 'gm');
    }

    // append a label and input to the form
    function appendCategoryLabel(value) {
        var $data_target = $('[data-role="' + target + '"]');
        // create the category label and add to form
        $data_target.append(createTag(value));
        $('#event-category-dummy').val('');
    }
    // guard clauses to make sure we're only dealing
    // with valid ids that haven't already been added
    if (typeof val === 'undefined') return;
    if (!val in categoryHash) return;
    if (alreadyAdded(val)) return;
    appendCategoryLabel(val);
    categoryTagListener();
}

/**
 * Upon completing an AJAX request
 * show the result in an element based
 * on the calling object's data-target attribute
 * @param event
 * @param xhr
 */
function showAjaxResponse(event, xhr){
    //target div has id equal to the clicked link's data target attr
    var target = $('#' + $(this).attr('data-target'));
   // target.html(xhr);
}

