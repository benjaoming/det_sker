<% environment.context_class.instance_eval { include Rails.application.routes.url_helpers } %>
<% environment.context_class.instance_eval { include EventsHelper } %>
var categoryHash;
var cat_typeahead_selector = '.event_categories ul.typeahead';

$(document).ready(function() {
    $('a[data-target]').on("ajax:success", showAjaxResponse);
    $('[data-toggle="popover"]').popover();
    createCategoryHash();
    $('.combobox').combobox();
    $('.combobox').click(function(){
        $(this).siblings('.dropdown-toggle').click();
    });
    $('input.category-combobox').keyup(function(){
        // if suggestions are available, remove the create box
        // if no suggestions are available, suggest category creation
        if (suggestionsAvailable(this, cat_typeahead_selector)) {
            $('#new-category-box').find('div').remove();
        } else {
           createSuggestionLink.call(this);
       }
    });

    $('input.location-combobox').keyup(function(){
        if (!suggestionsAvailable(this, '.event_location ul.typeahead')){
            createLocationSuggestionLink(this,
                    '#new-location-box',
                    '<%= new_location_path %>'
                    + '?locale=' + window.locale,
                    i18n.events.form.new_location,
                    i18n.events.form.new_location_title,
                    "event[location_id]",
                    'input.location-combobox',
                    '.event_location ul.typeahead'
            );
        }
    });

    $('.category-combobox').change(function(){
        addToTarget('selected-categories', this.value);
        $(this).val('');
    });

    $('[data-function="datetime-picker"]').datetimepicker({
        language: locale,
        minuteStepping: 5
    });
    $('#event_start_time').on('dp.change', function(e){
        $('#event_end_time').data("DateTimePicker").setMinDate(e.date);
        $('#event_end_time').data("DateTimePicker").setDate(e.date);
    });
    categoryTagListener();
});

/**
 * Attached to click on category tags X icon
 * remove whole tag and input target when clicked.
 */
function categoryTagListener(){
    $('[data-function="remove_category"]').click(function(){
        var id = $(this).attr('data-target');
        $('#' + id).remove();
        $(this).parent('.tag').remove();
        return false;
    })
}

/**
 * Populate a Bootstrap modal with our
 * ajax response and activate it.
 * @param event
 * @param xhr
 */
function loadRemoteModal(context, event, xhr) {
    // listeners to be attached dynamically to
    // the loaded modal object
    // in the event of success we receive a json object
    // which we use to update the form after writing
    // a success message
    // in case of failure, we receive back html which
    // we put back into the modal
    function handleSuccess(event, xhr) {
        $alert = $('<div>', {
            class: 'alert alert-success',
            role: 'alert',
            style: 'margin-bottom: 0px;',
            text: i18n.events.form.location_created
        });
        $target.find('.modal-body').html($alert);
        // put the id into the correct field
        var update_field = '[name="' + $this.attr('data-update-field') + '"]';
        $(update_field).val(xhr.id);
        // put the name into the input field and disable it
        var update_val = $this.attr('data-update-val');
        $(update_val).val(xhr.name).attr('disabled', true);
    }
    function handleFailure(event, xhr) {
        $target.find('.modal-body').html(xhr.responseText);
    }
    var $this = $(context);
    var title = $this.attr('data-modal-title');
    var $target = $('#remote_form_modal');
    $target.find('.modal-body').html(xhr);
    $target.find('.modal-title').text(title);
    $('form#new_location').on('ajax:success', handleSuccess);
    $('form#new_location').on('ajax:error', handleFailure);
    $target.modal();
}

/**
 * Reusable function to create alert boxes with link texts
 * returns an object with attributes link_id, html_id, and html.
* */
function createAlertBox(value, text, link, title, update_field, update_val) {
    text = text.replace('<value>', value);
    this.link_id = 'y' + Date.now();
    var create_link = '<a id="' + this.link_id + '" '
            + 'class="alert-link" href="' + link + '" '
            + 'data-value="' + value + '" '
            + 'data-remote="true"'
            + 'data-modal-title="' + title + '" ' +
            + 'data-update-field="' + update_field + '" '
            + 'data-update-val="' + update_val + '">'
            + text + '</a>';
    this.html_id = 'x' + Date.now();
    this.html = '<div class="alert alert-info alert-dismissible" id="' + this.html_id
            + '" role="alert"><button type="button" class="close" data-dismiss="alert">'
            + '<span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button> '
            + create_link + '</div>';
}

function createLocationSuggestionLink(input, target, link, text, title, update_field, update_val, typeahead){
    var alertbox = new createAlertBox(input.value, text, link, title, update_field, update_val);
    $(target).html(alertbox.html);
    $(target).removeClass('hidden');
    $('#' + alertbox.link_id).unbind().on('ajax:success', function(event, xhr){
        loadRemoteModal(this, event, xhr);
        $('#' + alertbox.html_id).remove();

    });
    $(update_val).keyup(function(){
        if (suggestionsAvailable(this, typeahead)){
            $('#' + alertbox.html_id).remove();
        }
    });
}

/**
 * Give the user a link to create a category
 * and handle clicks on this link
 */
function createSuggestionLink() {
    // add the created category to the view
    function createCategory(data) {
        categoryHash[data.id] = data.key;
        addToTarget('selected-categories', data.id);
        $('#' + alertbox.html_id).remove();
    }

    var alertbox = new createAlertBox(this.value, i18n.events.form.new_category);
    $('#new-category-box').html(alertbox.html);
    $('#new-category-box').removeClass('hidden');
    $('#' + alertbox.link_id).click(function () {
        // post create to our category controller and update the category hash with the values returned
        $.post('<%= categories_path %>', { 'category[key]': $(this).attr('data-value')}, createCategory, 'json');
        return false;
    });
}


/**
 * Check to see if popup suggestions are available
 * @params input - the current input form
 * @params typeahead_selector - a selector to find
 * the current typeahead
 * @returns {*|jQuery}
 */
function suggestionsAvailable(input, typeahead_selector){
    return $(input).is(':focus') && $(typeahead_selector).is(':visible');
}
/**
 * Build a hash of categories with their ids as
 * keys and their names as values.
 */
function createCategoryHash(){
    categoryHash = {};
    $('select#event-category-dummy option').map(function() {
        categoryHash[$(this).val()] = $(this).text();
    });
}

/**
 * Append the selected value to the correct target.
 * Ensure that the value is not already present and that
 * it is not an array or a number.
 * @param target
 * @param val
 */
function addToTarget(target, val) {
    // check to see if category already added
    function alreadyAdded(val){
        // need to convert from a jquery object to an Array
        var $vals_obj = $('[data-role="category_value"]').map(function(){
            return this.value
        });
        var vals = $.makeArray($vals_obj);
        return (vals.indexOf(val) >= 0)
    }

    // create label and input using Rails helper
    function createTag(id) {
        var val = categoryHash[id];
        var tag = '<%= category_tag %>';
        return tag.replace('_id_', id, 'gm')
                .replace('_value_', val, 'gm');
    }

    // append a label and input to the form
    function appendCategoryLabel(value) {
        var $data_target = $('[data-role="' + target + '"]');
        // create the category label and add to form
        $data_target.append(createTag(value));
        $('#event-category-dummy').val('');
    }
    // guard clauses to make sure we're only dealing
    // with valid ids that haven't already been added
    if (!val in categoryHash) return;
    if (!val.isNumeric()) return;
    if (alreadyAdded(val)) return;
    appendCategoryLabel(val);
    categoryTagListener();
}

/**
 * Upon completing an AJAX request
 * show the result in an element based
 * on the calling object's data-target attribute
 * @param event
 * @param xhr
 */
function showAjaxResponse(event, xhr){
    //target div has id equal to the clicked link's data target attr
    var target = $('#' + $(this).attr('data-target'));
    target.html(xhr);
    $(this).parents('div.comment-container_js').hide();
    target.removeClass('hidden');
}

